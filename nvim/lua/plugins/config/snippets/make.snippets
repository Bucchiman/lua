snippet _8 metadate
	#
	# FileName:     Makefile
	# Author: 		8ucchiman
	# CreatedDate:  2023-07-27 13:18:00
	# LastModified: 2023-02-03 21:27:40 +0900
	# Reference: 	https://qiita.com/chibi929/items/b8c5f36434d5d3fbfa4a
	# Description:	---
	#

snippet _8template template_variables
	# https://nao-bamboo.hatenablog.com/entry/2015/09/11/175832
	PROGNAME := 8ucchiman
	INDIR := include
	SRCDIR := src
	LIBDIR := lib
	OUTDIR := build
	TARGET := $(OUTDIR)/$(PROGNAME)
	SRCS := $(wildcard $(SRCDIR)/*.c) $(wildcard $(SRCDIR)/$(LIBDIR)/*.c)
	OBJS := $(addprefix $(OUTDIR)/,$(patsubst %.c,%.o,$(SRCS)))

	CC = gcc
	CFLAGS = -Wall -O2 -I $(INCDIR)
	
	.PHONY: all clean
	all: $(TARGET)

	$(TARGET): $(OBJS)
		$(CC) $(CFLAGS) -o $@ $^

	$(OUTDIR)/%.o:%.c
		@if [ ! -e `dirname $@` ]; then mkdir -p `dirname $@`; fi
		$(CC) $(CFLAGS) -o $@ -c $<

	clean:
		rm -rf $(OUTDIR)

snippet _8PHONY template_PHONY
	.PHONY: clean run debug

snippet _8macro:$@ target (target: prerequisites)
	$@

snippet _8macro:$^ prerequisites list (target: prerequisites)
	$^

snippet _8macro:$< first prerequisite (target: one, the rest)
	$<		# 最初の依存ファイル


snippet _8static 静的ライブラリ作成
	# 静的ライブラリ作成
	static: *.o
		ar rvs libhoge.a geho.o

snippet _8dynamic 共有ライブラリ作成
	# 共有ライブラリ作成
	g++ -shared hoge.o -o libhoge.so

snippet _8filter $(filter PATTERN..., TEXT)  PATTERNの文字列に一致する要素を取得
	# - $(filter PATTERN..., TEXT)  PATTERNの文字列に一致する要素を取得
	VAR := hoge.h hoge.cpp geho.h geho.cpp
	sample_filter:
		@echo "$(filter %.cpp, $(VAR))" # -> hoge.cpp, geho.cpp

snippet _8filter_out $(filter-out PATTERN..., TEXT) PATTERNの文字列に一致しない要素
	# - $(filter-out PATTERN..., TEXT) PATTERNの文字列に一致しない要素
	VAR := hoge.h hoge.cpp geho.h geho.cpp
	sample_filter_out:
		@echo "$(filter-out %.cpp, $(VAR))" # -> hoge.h geho.h

snippet _8findstring $(findstring FIND, IN) IN内にFINDの文字列があれば、その文字列を抽出
	# - $(findstring FIND, IN) IN内にFINDの文字列があれば、その文字列を抽出
	VAR := abc def ghi
	sample_findstring:
		@echo "$(findstring bc, $(VAR))" # -> bc

snippet _8firstword $(firstword NAMES...) NAMES内の最初の要素を取得
	# - $(firstword NAMES...) NAMES内の最初の要素を取得
	VAR := abc def ghi
	sample_firstword:
		@echo "$(firstword $(VAR))" # -> abc

snippet _8lastword $(lastword NAMES...) NAMES内の最後の要素を取得
	# - $(lastword NAMES...) NAMES内の最後の要素を取得
	VAR := abc def ghi
	sample_lastword:
		@echo "$(lastword $(VAR))" # -> ghi

snippet _8patsubst $(patsubst PATTERN,REPLACEMENT,TEXT) TEXT内からPATTERNにマッチしたものをREPLACEMENTに置き換える。
	# - $(patsubst PATTERN,REPLACEMENT,TEXT) TEXT内からPATTERNにマッチしたものをREPLACEMENTに置き換える。
	VAR := hoge.cpp geho.cpp
	sample_patsubst:
		@echo "$(patsubst %.cpp, %.o, $(VAR))" # -> hoge.o geho.o

snippet _8sort $(sort LIST)
	# - $(sort LIST)
	VAR := hoge foo geho fuga
	sample_sort:
		@echo "$(sort $(VAR))" # -> foo fuga geho hoge

snippet _8strip $(strip STRING) STRINGの無駄な空白を取り除く
	# - $(strip STRING) STRINGの無駄な空白を取り除く
	VAR := a b  c     d
	sample_strip:
		@echo "$(strip $(VAR))" # -> a b c d

snippet _8subst $(subst FROM, TO, TEXT) TEXT内のFROMをTOに置き換える
	# - $(subst FROM, TO, TEXT) TEXT内のFROMをTOに置き換える
	VAR := hoge.cpp geho.cpp
	sample_subst:
		@echo "$(subst .cpp, .o, $(VAR))" # -> hoge.o geho.o

snippet _8word $(word N,TEXT) TEXT内のN番目の要素を取得
	# - $(word N,TEXT) TEXT内のN番目の要素を取得
	VAR := abc def ghi
	sample_word:
		@echo "$(word 1, $(VAR))" # -> abc

snippet _8wordlist $(wordlist S, E, TEXT) TEXTのSからEまでの要素を取得
	# - $(wordlist S, E, TEXT) TEXTのSからEまでの要素を取得
	VAR := abc def ghi
	sample_wordlist:
		@echo "$(wordlist 1, 2, $(VAR))" # -> abc def

snippet _8words $(words TEXT) TEXTの要素数を取得
	# - $(words TEXT) TEXTの要素数を取得
	VAR := abc def ghi
	sample_words:
		@echo "$(words $(VAR))" # -> 3

snippet _8abspath $(abspath NAMES...) NAMESの各要素の絶対パスを取得
	# - $(abspath NAMES...) NAMESの各要素の絶対パスを取得
	VAR := ../ ./ Makefile
	sample_abspath:
		@echo "$(abspath $(VAR))"
