snippet _8 metadate
	#
	# FileName:     Makefile
	# Author: 		8ucchiman
	# CreatedDate:  2023-07-27 13:18:00
	# LastModified: 2023-02-03 21:27:40 +0900
	# Reference: 	https://qiita.com/chibi929/items/b8c5f36434d5d3fbfa4a
	# Description:	---
	#

snippet _8template template_variables
	# https://nao-bamboo.hatenablog.com/entry/2015/09/11/175832
	PROGNAME := 8ucchiman
	INDIR := include
	SRCDIR := src
	LIBDIR := lib
	OUTDIR := build
	TARGET := $(OUTDIR)/$(PROGNAME)
	SRCS := $(wildcard $(SRCDIR)/*.c) $(wildcard $(SRCDIR)/$(LIBDIR)/*.c)
	OBJS := $(addprefix $(OUTDIR)/,$(patsubst %.c,%.o,$(SRCS)))

	CC = gcc
	CFLAGS = -Wall -O2 -I $(INCDIR)
	
	.PHONY: all clean
	all: $(TARGET)

	$(TARGET): $(OBJS)
		$(CC) $(CFLAGS) -o $@ $^

	$(OUTDIR)/%.o:%.c
		@if [ ! -e \`dirname $@\` ]; then mkdir -p \`dirname $@\`; fi
		$(CC) $(CFLAGS) -o $@ -c $<

	clean:
		rm -rf $(OUTDIR)

snippet _8PHONY template_PHONY
	.PHONY: clean run debug

snippet _8macro:$@ target (target: prerequisites)
	$@

snippet _8macro:$^ prerequisites list (target: prerequisites)
	$^

snippet _8macro:$< first prerequisite (target: one, the rest)
	$<		# 最初の依存ファイル


snippet _8static 静的ライブラリ作成
	# 静的ライブラリ作成
	static: *.o
		ar rvs libhoge.a geho.o

snippet _8dynamic 共有ライブラリ作成
	# 共有ライブラリ作成
	g++ -shared hoge.o -o libhoge.so

snippet _8:function:filter $(filter PATTERN..., TEXT)  PATTERNの文字列に一致する要素を取得
	# - $(filter PATTERN..., TEXT)  PATTERNの文字列に一致する要素を取得
	VAR := hoge.h hoge.cpp geho.h geho.cpp
	sample_filter:
		@echo "$(filter %.cpp, $(VAR))" # -> hoge.cpp, geho.cpp

snippet _8:function:filter_out $(filtjer-out PATTERN..., TEXT) PATTERNの文字列に一致しない要素
	# - $(filter-out PATTERN..., TEXT) PATTERNの文字列に一致しない要素
	VAR := hoge.h hoge.cpp geho.h geho.cpp
	sample_filter_out:
		@echo "$(filter-out %.cpp, $(VAR))" # -> hoge.h geho.h

snippet _8:function:findstring $(findstring FIND, IN) IN内にFINDの文字列があれば、その文字列を抽出
	# - $(findstring FIND, IN) IN内にFINDの文字列があれば、その文字列を抽出
	VAR := abc def ghi
	sample_findstring:
		@echo "$(findstring bc, $(VAR))" # -> bc

snippet _8:function:firstword $(firstword NAMES...) NAMES内の最初の要素を取得
	# - $(firstword NAMES...) NAMES内の最初の要素を取得
	VAR := abc def ghi
	sample_firstword:
		@echo "$(firstword $(VAR))" # -> abc

snippet _8:function:lastword $(lastword NAMES...) NAMES内の最後の要素を取得
	# - $(lastword NAMES...) NAMES内の最後の要素を取得
	VAR := abc def ghi
	sample_lastword:
		@echo "$(lastword $(VAR))" # -> ghi

snippet _8:function:patsubst $(patsubst PATTERN,REPLACEMENT,TEXT) TEXT内からPATTERNにマッチしたものをREPLACEMENTに置き換える。
	# - $(patsubst PATTERN,REPLACEMENT,TEXT) TEXT内からPATTERNにマッチしたものをREPLACEMENTに置き換える。
	VAR := hoge.cpp geho.cpp
	sample_patsubst:
		@echo "$(patsubst %.cpp, %.o, $(VAR))" # -> hoge.o geho.o

snippet _8:function:sort $(sort LIST)
	# - $(sort LIST)
	VAR := hoge foo geho fuga
	sample_sort:
		@echo "$(sort $(VAR))" # -> foo fuga geho hoge

snippet _8:function:strip $(strip STRING) STRINGの無駄な空白を取り除く
	# - $(strip STRING) STRINGの無駄な空白を取り除く
	VAR := a b  c     d
	sample_strip:
		@echo "$(strip $(VAR))" # -> a b c d

snippet _8:function:subst $(subst FROM, TO, TEXT) TEXT内のFROMをTOに置き換える
	# - $(subst FROM, TO, TEXT) TEXT内のFROMをTOに置き換える
	VAR := hoge.cpp geho.cpp
	sample_subst:
		@echo "$(subst .cpp, .o, $(VAR))" # -> hoge.o geho.o

snippet _8:function:word $(word N,TEXT) TEXT内のN番目の要素を取得
	# - $(word N,TEXT) TEXT内のN番目の要素を取得
	VAR := abc def ghi
	sample_word:
		@echo "$(word 1, $(VAR))" # -> abc

snippet _8function:wordlist $(wordlist S, E, TEXT) TEXTのSからEまでの要素を取得
	# - $(wordlist S, E, TEXT) TEXTのSからEまでの要素を取得
	VAR := abc def ghi
	sample_wordlist:
		@echo "$(wordlist 1, 2, $(VAR))" # -> abc def

snippet _8function:words $(words TEXT) TEXTの要素数を取得
	# - $(words TEXT) TEXTの要素数を取得
	VAR := abc def ghi
	sample_words:
		@echo "$(words $(VAR))" # -> 3

snippet _8:function:abspath $(abspath NAMES...) NAMESの各要素の絶対パスを取得
	# - $(abspath NAMES...) NAMESの各要素の絶対パスを取得
	VAR := ../ ./ Makefile
	sample_abspath:
		@echo "$(abspath $(VAR))"


snippet _8:function:dir $(dir $(FILES)) ディレクトリのみ抽出
	# https://tex2e.github.io/blog/makefile/functions
	# - $(dir $FILES) ディレクトリのみ抽出
	FILES := src/hoge.c src/hoge.h index.html
	sample_dir:
		@echo $(dir $(FILES)) # -> src/ src/ ./

snippet _8:function:notdir $(notdir $(FILES)) ディレクトリ以外を抽出
	# https://tex2e.github.io/blog/makefile/functions
	# - $(notdir $(FILES)) ディレクトリ以外を抽出
	FILES := src/hoge.c  src/hoge.h index.html
	sample_notdir:
		@echo $(notdir $(FILES))   # -> hoge.c hoge.h index.html

snippet _8:function:suffix $(suffix $(FILES)) 拡張子のみを抽出
	# https://tex2e.github.io/blog/makefile/functions
	# $(suffix $(FILES)) 拡張子のみを抽出
	FILES := src/hoge.c src/hoge.h index.html
	sample_suffix:
		@echo $(suffix $(FILES))   # -> .c .h .html

snippet _8:function:basename $(basename $(FILES)) 拡張子以外を抽出
	# https://tex2e.github.io/blog/makefile/functions
	# $(basename $(FILES)) 拡張子以外を抽出
	FILES := src/hoge.c src/hoge.h index.html
	sample_basename:
		@echo $(basename $(FILES))  # -> src/hoge src/hoge index

snippet _8:function:addprefix $(addprefix 追加したい文字, 対象)
	# https://tex2e.github.io/blog/makefile/functions
	# $(addprefix 追加したい文字, 対象)
	FILES := foo bar
	sample_addprefix:
		@echo $(addprefix src/, $(FILES))

snippet _8:function:addsufix $(addsufix 追加したい文字, 対象)
	# https://tex2e.github.io/blog/makefile/functions
	# $(addsufix 追加したい文字, 対象)
	FILES := foo bar
	sample_addsufix:
		@echo $(addsufix .c, $(FILES))   # -> foo.c bar.c


#snippet _8:function:eval 文字列評価(foreachと組み合わせ推奨)


snippet _8:function:join $(join リスト1, リスト2) リスト1とリスト2を結合
	LIST1 := foo bar
	LIST2 := .c .h

	sample_join:
		@echo $(join $(LIST1),$(LIST2))  # -> foo.c bar.h

snippet _8:function:wildcard wildcardでディレクトリにあるファイル名を抽出
	# wildcardでディレクトリにあるファイル名を抽出
	sample_wildcard:
		@echo $(wildcard *)    # => Makefile foo.c foo.h bar.c bar.h
		@echo $(wildcard *.c)  # => foo.c bar.c

snippet _8:function:call $(call 関数名/マクロ名, 引数) 関数やマクロを呼び出す
	# https://tex2e.github.io/blog/makefile/functions
	# $(call 関数名/マクロ名, 引数) 関数やマクロを呼び出す
	reverse = $(2) $(1)
	sample_call01:
		@echo $(call reverse A, B)   # -> B A

	define HELLO
		@echo "Hello, ${1}!"
	endef

	sample_call02:
		$(call HELLO, Japan)    # -> Hello, Japan!

